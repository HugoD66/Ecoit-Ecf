security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        backend_users:
            memory:
                users:
                    user: { password: '$2y$13$8pXXmKQ23hg71qqxg/SKyOOkC4g.wX/YE5AH73k.Bn.K2MZFthBbC', roles: ['ROLE_USER'] }
                    teatcher: { password: '$2y$13$0JaBtqdcIPXP3gocJM//vub5079OPgVrBfExIw1C0wdCdiLilDPI2', roles: ['ROLE_TEATCHER'] }
                    admin: { password: '$2y$13$3ewcHqG6QWLjjGHDCQtw0Oeb3Y7tQBGzdS.PtfhQPYNZ3T/nVXAhK', roles : [ 'ROLE_ADMIN', 'ROLE_SUPER_ADMIN' ] }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: login
                check_path: login
                enable_csrf: true
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_home
            entry_point: App\Security\AuthenticationEntryPoint
            access_denied_handler: App\Security\AccessDeniedHandler

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    role_hierarchy:
        ROLE_USER:     ROLE_USER
        ROLE_TEATCHER:    ROLE_USER
        ROLE_ADMIN: [ROLE_SUPER_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/formation, roles: ROLE_USER }
         # - { path: ^/createform, roles: ROLE_TEATCHER }
         - { path: ^/admin, roles: ROLE_SUPER_ADMIN }
         - { path: ^/teatcher, roles: ROLE_TEATCHER  }
         - { path: ^/usergestion, roles: ROLE_USER  }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
